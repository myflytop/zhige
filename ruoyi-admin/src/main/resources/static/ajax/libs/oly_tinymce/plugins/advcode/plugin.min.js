/*!
 * Tiny Advanced Code Editor plugin
 *
 * Copyright (c) 2022 Ephox Corporation DBA Tiny Technologies, Inc.
 * Licensed under the Tiny commercial license. See https://www.tiny.cloud/legal/
 *
 * Version: 3.0.2-34
 */

!function() {
    "use strict";
    const e = e=>parseInt(e, 10)
      , t = (e,t)=>{
        const r = e - t;
        return 0 === r ? 0 : r > 0 ? 1 : -1
    }
      , r = (e,t,r)=>({
        major: e,
        minor: t,
        patch: r
    })
      , o = t=>{
        const o = /([0-9]+)\.([0-9]+)\.([0-9]+)(?:(\-.+)?)/.exec(t);
        return o ? r(e(o[1]), e(o[2]), e(o[3])) : r(0, 0, 0)
    }
      , n = e=>t=>t.options.get(e)
      , i = n("codemirror_script")
      , s = n("codemirror_css")
      , c = n("codemirror_linewrapping")
      , a = n("codemirror_linenumbers")
      , u = n("codemirror_foldgutter")
      , d = n("codemirror_gutter")
      , l = n("codemirror_theme")
      , m = e=>"rtl" === e.getBody().dir ? "rtl" : "ltr"
      , h = ("function",
    e=>"function" == typeof e);
    const g = (!1,
    ()=>false);
    class p {
        constructor(e, t) {
            this.tag = e,
            this.value = t
        }
        static some(e) {
            return new p(!0,e)
        }
        static none() {
            return p.singletonNone
        }
        fold(e, t) {
            return this.tag ? t(this.value) : e()
        }
        isSome() {
            return this.tag
        }
        isNone() {
            return !this.tag
        }
        map(e) {
            return this.tag ? p.some(e(this.value)) : p.none()
        }
        bind(e) {
            return this.tag ? e(this.value) : p.none()
        }
        exists(e) {
            return this.tag && e(this.value)
        }
        forall(e) {
            return !this.tag || e(this.value)
        }
        filter(e) {
            return !this.tag || e(this.value) ? this : p.none()
        }
        getOr(e) {
            return this.tag ? this.value : e
        }
        or(e) {
            return this.tag ? this : e
        }
        getOrThunk(e) {
            return this.tag ? this.value : e()
        }
        orThunk(e) {
            return this.tag ? this : e()
        }
        getOrDie(e) {
            if (this.tag)
                return this.value;
            throw new Error(null != e ? e : "Called getOrDie on None")
        }
        static from(e) {
            return null == e ? p.none() : p.some(e)
        }
        getOrNull() {
            return this.tag ? this.value : null
        }
        getOrUndefined() {
            return this.value
        }
        each(e) {
            this.tag && e(this.value)
        }
        toArray() {
            return this.tag ? [this.value] : []
        }
        toString() {
            return this.tag ? `some(${this.value})` : "none()"
        }
    }
    p.singletonNone = new p(!1);
    const f = Object.hasOwnProperty
      , v = e=>{
        if (null == e)
            throw new Error("Node cannot be null or undefined");
        return {
            dom: e
        }
    }
      , w = (e,t)=>{
        const r = (t || document).createElement("div");
        if (r.innerHTML = e,
        !r.hasChildNodes() || r.childNodes.length > 1) {
            const t = "HTML does not have a single root node";
            throw console.error(t, e),
            new Error(t)
        }
        return v(r.childNodes[0])
    }
      , b = v;
    "undefined" != typeof window ? window : Function("return this;")();
    const y = e=>{
        const t = e.dom;
        null !== t.parentNode && t.parentNode.removeChild(t)
    }
      , _ = (e,t,r)=>{
        let o = e.dom;
        const n = h(r) ? r : g;
        for (; o.parentNode; ) {
            o = o.parentNode;
            const e = b(o);
            if (t(e))
                return p.some(e);
            if (n(e))
                break
        }
        return p.none()
    }
      , N = "\x3c!--mce_cursor--\x3e"
      , C = (e,t)=>{
        const r = e.dom
          , o = e.selection
          , n = o.getBookmark()
          , i = (e=>{
            return t = e,
            f.call(t, "name");
            var t
        }
        )(n) ? r.select(n.name)[n.index] : r.select(`#${n.id}_start`)[0]
          , s = p.from(i).map((t=>{
            const r = b(e.getBody());
            return ((e,t)=>{
                const o = w(N)
                  , n = b(e)
                  , i = ((e,t,r)=>((e,t,r,o,n)=>o(r) ? p.some(r) : h(n) && n(r) ? p.none() : t(r, o, n))(0, _, e, t, r))(n, (e=>((e,t)=>{
                    const r = e.dom;
                    return !(!r || !r.hasAttribute) && r.hasAttribute("data-mce-bogus")
                }
                )(e)), (e=>{
                    return t = r,
                    e.dom === t.dom;
                    var t
                }
                )).getOr(n);
                return ((e,t)=>{
                    const r = (e=>p.from(e.dom.parentNode).map(b))(e);
                    r.each((r=>{
                        r.dom.insertBefore(t.dom, e.dom)
                    }
                    ))
                }
                )(i, o),
                o
            }
            )(t)
        }
        ))
          , c = t();
        return s.each(y),
        o.moveToBookmark(n),
        c
    }
      , O = e=>({
        name: "codeview",
        type: "customeditor",
        tag: "div",
        scriptId: "tinymce.plugins.advcode.customeditor",
        scriptUrl: e.customEditorScriptUrl,
        settings: e
    })
      , S = (e,t)=>{
        const r = (e=>{
            const t = (e=>{
                const t = e.split(/\r?\n/);
                return ((e,t)=>{
                    for (let r = 0; r < e.length; r++) {
                        const o = t(e[r], r);
                        if (o.isSome())
                            return o
                    }
                    return p.none()
                }
                )(t, ((e,r)=>{
                    const o = e.indexOf(N);
                    return (n = -1 !== o,
                    i = o,
                    n ? p.some(i) : p.none()).map((o=>e === N ? 0 === r ? {
                        line: r,
                        ch: 0
                    } : {
                        line: r - 1,
                        ch: t[r - 1].length
                    } : {
                        line: r,
                        ch: o
                    }));
                    var n, i
                }
                )).getOr({
                    line: 0,
                    ch: 0
                })
            }
            )(C(e, (()=>e.getContent({
                source_view: !0
            }))));
            return {
                content: e.getContent({
                    source_view: !0
                }),
                cursor: t
            }
        }
        )(e)
          , o = {
            ...t,
            cursor: r.cursor
        }
          , n = {
            title: "Source Code",
            size: "large",
            body: {
                type: "panel",
                items: [O(o)]
            },
            buttons: [{
                type: "cancel",
                name: "cancel",
                text: "Cancel"
            }, {
                type: "submit",
                name: "save",
                text: "Save",
                primary: !0
            }],
            initialData: {
                codeview: r.content
            },
            onSubmit: t=>{
                ((e,t)=>{
                    e.focus(),
                    e.undoManager.transact((()=>{
                        e.setContent(t)
                    }
                    )),
                    e.selection.setCursorLocation(),
                    e.nodeChanged()
                }
                )(e, t.getData().codeview),
                t.close()
            }
        };
        e.windowManager.open(n)
    }
    ;
    tinymce.PluginManager.add("advcode", ((e,r)=>{
        ((e,r)=>!!e && -1 === ((e,r)=>{
            const o = t(e.major, r.major);
            if (0 !== o)
                return o;
            const n = t(e.minor, r.minor);
            if (0 !== n)
                return n;
            const i = t(e.patch, r.patch);
            return 0 !== i ? i : 0
        }
        )((e=>o((e=>[e.majorVersion, e.minorVersion].join(".").split(".").slice(0, 3).join("."))(e)))(e), o(r)))(tinymce, "6.0.0") ? console.error("The advcode plugin requires at least version 6.0.0 of TinyMCE.") : ((e,t)=>{
            ((e,t)=>{
                const r = e.options.register;
                r("codemirror_script", {
                    processor: "string",
                    default: t + "/codemirror.min.js"
                }),
                r("codemirror_css", {
                    processor: "string",
                    default: t + "/codemirror.min.css"
                }),
                r("codemirror_linewrapping", {
                    processor: "boolean",
                    default: !0
                }),
                r("codemirror_linenumbers", {
                    processor: "boolean",
                    default: !0
                }),
                r("codemirror_foldgutter", {
                    processor: "boolean",
                    default: !0
                }),
                r("codemirror_gutter", {
                    processor: "boolean",
                    default: !0
                }),
                r("codemirror_theme", {
                    processor: "string",
                    default: "default"
                })
            }
            )(e, t);
            const r = "sourcecode"
              , o = ((e,t,r)=>()=>{
                const o = ((e,t)=>({
                    customEditorScriptUrl: t + "/customeditor.min.js",
                    codeMirrorScriptUrl: i(e),
                    codeMirrorCssUrl: s(e),
                    lineWrapping: c(e),
                    lineNumbers: a(e),
                    foldGutter: u(e),
                    theme: l(e),
                    direction: m(e),
                    gutter: d(e),
                    editorId: e.id
                }))(t, r);
                e(t, o)
            }
            )(S, e, t);
            e.addCommand("mceCodeEditor", o),
            e.ui.registry.addButton("code", {
                icon: r,
                tooltip: "Source code",
                onAction: o
            }),
            e.ui.registry.addMenuItem("code", {
                icon: r,
                text: "Source code",
                onAction: o
            })
        }
        )(e, r)
    }
    ))
}();
