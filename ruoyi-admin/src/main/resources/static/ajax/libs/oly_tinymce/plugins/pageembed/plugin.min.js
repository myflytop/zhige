/*!
 * Tiny Page Embed plugin
 *
 * Copyright (c) 2022 Ephox Corporation DBA Tiny Technologies, Inc.
 * Licensed under the Tiny commercial license. See https://www.tiny.cloud/legal/
 *
 * Version: 2.1.0-43
 */

!function() {
    "use strict";
    const e = e=>parseInt(e, 10)
      , t = (e,t)=>{
        const n = e - t;
        return 0 === n ? 0 : n > 0 ? 1 : -1
    }
      , n = (e,t,n)=>({
        major: e,
        minor: t,
        patch: n
    })
      , r = t=>{
        const r = /([0-9]+)\.([0-9]+)\.([0-9]+)(?:(\-.+)?)/.exec(t);
        return r ? n(e(r[1]), e(r[2]), e(r[3])) : n(0, 0, 0)
    }
      , s = [{
        text: "Responsive - 21x9",
        value: "tiny-pageembed--21by9"
    }, {
        text: "Responsive - 16x9",
        value: "tiny-pageembed--16by9"
    }, {
        text: "Responsive - 4x3",
        value: "tiny-pageembed--4by3"
    }, {
        text: "Responsive - 1x1",
        value: "tiny-pageembed--1by1"
    }]
      , i = e=>t=>t.options.get(e)
      , o = i("tiny_pageembed_classes")
      , l = i("tiny_pageembed_inline_styles")
      , a = i("tiny_pageembed_css_url")
      , c = e=>t=>(e=>{
        const t = typeof e;
        return null === e ? "null" : "object" === t && Array.isArray(e) ? "array" : "object" === t && (n = r = e,
        (s = String).prototype.isPrototypeOf(n) || (null === (i = r.constructor) || void 0 === i ? void 0 : i.name) === s.name) ? "string" : t;
        var n, r, s, i
    }
    )(t) === e
      , u = e=>t=>typeof t === e
      , d = c("string")
      , p = c("array")
      , m = u("boolean")
      , y = e=>!(e=>null == e)(e)
      , g = u("function")
      , h = u("number");
    class f {
        constructor(e, t) {
            this.tag = e,
            this.value = t
        }
        static some(e) {
            return new f(!0,e)
        }
        static none() {
            return f.singletonNone
        }
        fold(e, t) {
            return this.tag ? t(this.value) : e()
        }
        isSome() {
            return this.tag
        }
        isNone() {
            return !this.tag
        }
        map(e) {
            return this.tag ? f.some(e(this.value)) : f.none()
        }
        bind(e) {
            return this.tag ? e(this.value) : f.none()
        }
        exists(e) {
            return this.tag && e(this.value)
        }
        forall(e) {
            return !this.tag || e(this.value)
        }
        filter(e) {
            return !this.tag || e(this.value) ? this : f.none()
        }
        getOr(e) {
            return this.tag ? this.value : e
        }
        or(e) {
            return this.tag ? this : e
        }
        getOrThunk(e) {
            return this.tag ? this.value : e()
        }
        orThunk(e) {
            return this.tag ? this : e()
        }
        getOrDie(e) {
            if (this.tag)
                return this.value;
            throw new Error(null != e ? e : "Called getOrDie on None")
        }
        static from(e) {
            return y(e) ? f.some(e) : f.none()
        }
        getOrNull() {
            return this.tag ? this.value : null
        }
        getOrUndefined() {
            return this.value
        }
        each(e) {
            this.tag && e(this.value)
        }
        toArray() {
            return this.tag ? [this.value] : []
        }
        toString() {
            return this.tag ? `some(${this.value})` : "none()"
        }
    }
    f.singletonNone = new f(!1);
    const b = Array.prototype.indexOf
      , v = Array.prototype.push
      , S = (e,t)=>{
        return n = e,
        r = t,
        b.call(n, r) > -1;
        var n, r
    }
      , w = (e,t)=>{
        const n = e.length
          , r = new Array(n);
        for (let s = 0; s < n; s++) {
            const n = e[s];
            r[s] = t(n, s)
        }
        return r
    }
      , x = (e,t)=>{
        for (let n = 0, r = e.length; n < r; n++)
            t(e[n], n)
    }
      , A = (e,t)=>{
        const n = [];
        for (let r = 0, s = e.length; r < s; r++) {
            const s = e[r];
            t(s, r) && n.push(s)
        }
        return n
    }
      , C = e=>{
        const t = [];
        for (let n = 0, r = e.length; n < r; ++n) {
            if (!p(e[n]))
                throw new Error("Arr.flatten item " + n + " was not an array, input: " + e);
            v.apply(t, e[n])
        }
        return t
    }
      , _ = (e,t)=>C(w(e, t))
      , O = Object.keys
      , I = Object.hasOwnProperty;
    "undefined" != typeof window ? window : Function("return this;")();
    const P = (1,
    e=>1 === (e=>e.dom.nodeType)(e));
    const E = (e,t,n)=>{
        ((e,t,n)=>{
            if (!(d(n) || m(n) || h(n)))
                throw console.error("Invalid call to Attribute.set. Key ", t, ":: Value ", n, ":: Element ", e),
                new Error("Attribute value was not simple");
            e.setAttribute(t, n + "")
        }
        )(e.dom, t, n)
    }
      , N = (e,t)=>{
        const n = e.dom.getAttribute(t);
        return null === n ? void 0 : n
    }
      , T = (e,t)=>f.from(N(e, t))
      , j = e=>{
        if (null == e)
            throw new Error("Node cannot be null or undefined");
        return {
            dom: e
        }
    }
      , R = (e,t)=>{
        const n = (t || document).createElement(e);
        return j(n)
    }
      , L = j
      , k = e=>void 0 !== e.dom.classList
      , z = (e,t)=>{
        k(e) ? e.dom.classList.add(t) : ((e,t)=>{
            ((e,t,n)=>{
                const r = ((e,t)=>{
                    const n = N(e, t);
                    return void 0 === n || "" === n ? [] : n.split(" ")
                }
                )(e, t)
                  , s = r.concat([n]);
                E(e, t, s.join(" "))
            }
            )(e, "class", t)
        }
        )(e, t)
    }
      , K = (e,t)=>k(e) && e.dom.classList.contains(t)
      , B = "tiny-pageembed"
      , U = e=>K(e, B)
      , M = e=>{
        const t = e.attr("class");
        return y(t) && -1 !== (" " + t + " ").indexOf(" tiny-pageembed ")
    }
      , D = e=>{
        x(e, (e=>{
            if (M(e)) {
                const t = new tinymce.html.Node("span",1);
                t.attr("class", "mce-shim"),
                t.attr("data-mce-bogus", "1"),
                e.append(t),
                e.attr("contenteditable", "false")
            }
        }
        ))
    }
      , F = e=>{
        x(e, (e=>{
            M(e) && e.attr("contenteditable", null)
        }
        ))
    }
      , V = e=>((e,t)=>{
        const n = e.dom.childNodes;
        return f.from(n[0]).map(L)
    }
    )(e)
      , q = (e,t)=>{
        e.dom.appendChild(t.dom)
    }
      , G = (e,t)=>((e,t)=>{
        const n = void 0 === t ? document : t.dom;
        return 1 !== (r = n).nodeType && 9 !== r.nodeType && 11 !== r.nodeType || 0 === r.childElementCount ? [] : w(n.querySelectorAll(e), L);
        var r
    }
    )(t, e);
    var H = function(e) {
        var t, n, r = e, s = {
            a: 0,
            b: 0,
            c: 0
        }, i = [];
        return t = function(t, n) {
            var o, l, a, c, u, d;
            if (t.test(r))
                for (l = 0,
                a = (o = r.match(t)).length; l < a; l += 1)
                    s[n] += 1,
                    c = o[l],
                    u = r.indexOf(c),
                    d = c.length,
                    i.push({
                        selector: e.substr(u, d),
                        type: n,
                        index: u,
                        length: d
                    }),
                    r = r.replace(c, Array(d + 1).join(" "))
        }
        ,
        (n = function(e) {
            var t, n, s, i;
            if (e.test(r))
                for (n = 0,
                s = (t = r.match(e)).length; n < s; n += 1)
                    i = t[n],
                    r = r.replace(i, Array(i.length + 1).join("A"))
        }
        )(/\\[0-9A-Fa-f]{6}\s?/g),
        n(/\\[0-9A-Fa-f]{1,5}\s/g),
        n(/\\./g),
        function() {
            var e, t, n, s, i = /{[^]*/gm;
            if (i.test(r))
                for (t = 0,
                n = (e = r.match(i)).length; t < n; t += 1)
                    s = e[t],
                    r = r.replace(s, Array(s.length + 1).join(" "))
        }(),
        t(/(\[[^\]]+\])/g, "b"),
        t(/(#[^\#\s\+>~\.\[:\)]+)/g, "a"),
        t(/(\.[^\s\+>~\.\[:\)]+)/g, "b"),
        t(/(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi, "c"),
        t(/(:(?!not|global|local)[\w-]+\([^\)]*\))/gi, "b"),
        t(/(:(?!not|global|local)[^\s\+>~\.\[:]+)/g, "b"),
        r = (r = (r = (r = (r = (r = r.replace(/[\*\s\+>~]/g, " ")).replace(/[#\.]/g, " ")).replace(/:not/g, "    ")).replace(/:local/g, "      ")).replace(/:global/g, "       ")).replace(/[\(\)]/g, " "),
        t(/([^\s\+>~\.\[:]+)/g, "c"),
        i.sort((function(e, t) {
            return e.index - t.index
        }
        )),
        {
            selector: e,
            specificity: "0," + s.a.toString() + "," + s.b.toString() + "," + s.c.toString(),
            specificityArray: [0, s.a, s.b, s.c],
            parts: i
        }
    }
      , W = e=>{
        const t = e.dom.styleSheets;
        return Array.prototype.slice.call(t)
    }
    ;
    const $ = e=>{
        const t = e.selectorText
          , n = e.style.cssText;
        if (void 0 === n)
            throw new Error("WARNING: Browser does not support cssText property");
        return {
            selector: t,
            style: n,
            raw: e.style
        }
    }
      , Y = e=>{
        const t = e.cssRules;
        return _(t, (e=>(e=>e.type === window.CSSRule.IMPORT_RULE)(e) ? Y(e.styleSheet) : (e=>e.type === window.CSSRule.STYLE_RULE)(e) ? [$(e)] : []))
    }
      , J = e=>_(e, Y)
      , Q = (e,t,n)=>{
        const r = _(t, (t=>{
            const n = G(e, t.selector);
            return x(n, (e=>{
                const n = ((e,t)=>{
                    const n = {};
                    return x(e, (r=>{
                        if (void 0 !== e[r]) {
                            const s = t.dom.style;
                            S(s, r) || (n[r] = e[r])
                        }
                    }
                    )),
                    n
                }
                )(t.raw, e);
                ((e,t)=>{
                    const n = e.dom;
                    ((e,t)=>{
                        const n = O(e);
                        for (let r = 0, s = n.length; r < s; r++) {
                            const s = n[r];
                            t(e[s], s)
                        }
                    }
                    )(t, ((e,t)=>{
                        ((e,t,n)=>{
                            if (!d(n))
                                throw console.error("Invalid call to CSS.set. Property ", t, ":: Value ", n, ":: Element ", e),
                                new Error("CSS value must be a string: " + n);
                            (e=>void 0 !== e.style && g(e.style.getPropertyValue))(e) && e.style.setProperty(t, n)
                        }
                        )(n, t, e)
                    }
                    ))
                }
                )(e, n)
            }
            )),
            n
        }
        ));
        n && x(r, (e=>{
            e.dom.removeAttribute("class")
        }
        ))
    }
      , X = (e,t,n)=>{
        const r = e=>-1 !== e.selector.indexOf(",")
          , s = _(A(e, r), (e=>{
            const t = e.selector.split(",");
            return w(t, (t=>({
                selector: t.trim(),
                raw: e.raw
            })))
        }
        ))
          , i = A(e, (e=>!r(e))).concat(s);
        i.sort(((e,t)=>function(e, t) {
            var n, r, s;
            if ("string" == typeof e) {
                if (-1 !== e.indexOf(","))
                    throw "Invalid CSS selector";
                n = H(e).specificityArray
            } else {
                if (!Array.isArray(e))
                    throw "Invalid CSS selector or specificity array";
                if (4 !== e.filter((function(e) {
                    return "number" == typeof e
                }
                )).length)
                    throw "Invalid specificity array";
                n = e
            }
            if ("string" == typeof t) {
                if (-1 !== t.indexOf(","))
                    throw "Invalid CSS selector";
                r = H(t).specificityArray
            } else {
                if (!Array.isArray(t))
                    throw "Invalid CSS selector or specificity array";
                if (4 !== t.filter((function(e) {
                    return "number" == typeof e
                }
                )).length)
                    throw "Invalid specificity array";
                r = t
            }
            for (s = 0; s < 4; s += 1) {
                if (n[s] < r[s])
                    return -1;
                if (n[s] > r[s])
                    return 1
            }
            return 0
        }(e.selector, t.selector))).reverse(),
        Q(t, i, n)
    }
      , Z = (e,t,n,r)=>{
        const s = W(e)
          , i = J(s).map((e=>{
            const t = e.selector;
            return {
                selector: n.hasOwnProperty(t) ? n[t] : t,
                raw: e.raw
            }
        }
        ));
        X(i, t, r)
    }
      , ee = (e,t,n,r)=>{
        const s = W(e)
          , i = J(s)
          , o = A(i, (e=>((e,t)=>((e,t,n)=>"" === t || e.length >= t.length && e.substr(0, 0 + t.length) === t)(e, t))(e.selector, n)));
        X(o, t, r)
    }
      , te = (e,t,n,r)=>{
        const s = W(e)
          , i = J(s)
          , o = A(i, (e=>S(n, e.selector)));
        X(o, t, r)
    }
    ;
    var ne = {
        inlineStyles: (e,t,n)=>{
            Z(e, t, n, !0)
        }
        ,
        inlineStylesKeepClasses: (e,t,n)=>{
            Z(e, t, n, !1)
        }
        ,
        inlinePrefixedStyles: (e,t,n)=>{
            ee(e, t, n, !0)
        }
        ,
        inlinePrefixedStylesKeepClasses: (e,t,n)=>{
            ee(e, t, n, !1)
        }
        ,
        inlineSelectorsStyles: (e,t,n)=>{
            te(e, t, n, !0)
        }
        ,
        inlineSelectorsStylesKeepClasses: (e,t,n)=>{
            te(e, t, n, !1)
        }
    }
      , re = {
        inlineStyles: ne.inlineStyles,
        inlineStylesKeepClasses: ne.inlineStylesKeepClasses,
        inlinePrefixedStyles: ne.inlinePrefixedStyles,
        inlinePrefixedStylesKeepClasses: ne.inlinePrefixedStylesKeepClasses,
        inlineSelectorsStyles: ne.inlineSelectorsStyles,
        inlineSelectorsStylesKeepClasses: ne.inlineSelectorsStylesKeepClasses
    };
    const se = (e,t,n)=>{
        n.trim().length > 0 && E(e, t, n)
    }
      , ie = (e,t,n,r)=>{
        const s = (e=>{
            const t = R("div");
            return E(t, "contentEditable", "false"),
            z(t, B),
            "inline" !== e.size && z(t, e.size),
            t
        }
        )(e)
          , i = R("iframe");
        var o, l;
        return se(i, "src", e.source.value),
        se(i, "title", e.title),
        se(i, "name", e.name),
        se(i, "longdesc", e.descriptionUrl.value),
        (o = e,
        l = "dimensions",
        ((e,t)=>I.call(e, t))(o, l) ? f.from(o[l]) : f.none()).each((e=>{
            se(i, "width", e.width),
            se(i, "height", e.height)
        }
        )),
        e.showBorder || E(i, "frameborder", "0"),
        E(i, "scrolling", e.scrollbar ? "yes" : "no"),
        q(s, i),
        t() && ((e,t,n)=>{
            const r = R("div");
            q(r, t);
            const s = e();
            n().fold((()=>{
                re.inlinePrefixedStylesKeepClasses(s, r, ".tiny-pageembed")
            }
            ), (e=>{
                const t = w(e, (e=>`.${e}`));
                re.inlineSelectorsStylesKeepClasses(s, r, t)
            }
            ));
            const i = G(r, "*[style]");
            x(i, (e=>{
                T(e, "style").each((t=>E(e, "data-mce-style", t)))
            }
            ))
        }
        )(n, s, r),
        (e=>{
            const t = R("div")
              , n = L(e.dom.cloneNode(!0));
            return q(t, n),
            (e=>e.dom.innerHTML)(t)
        }
        )(s)
    }
      , oe = e=>{
        const t = [{
            text: "Inline Value",
            value: "inline"
        }].concat(o(e))
          , n = r=>({
            title: "Insert/Edit Iframe",
            body: {
                type: "tabpanel",
                tabs: [{
                    title: "General",
                    items: C([[{
                        name: "source",
                        type: "urlinput",
                        filetype: "file",
                        label: "Source"
                    }], t.length > 1 ? [{
                        label: "Size",
                        type: "selectbox",
                        name: "size",
                        items: t
                    }] : [], "inline" === r.size ? [{
                        type: "sizeinput",
                        name: "dimensions",
                        label: "Constrain proportions",
                        constrain: !0
                    }] : []])
                }, {
                    title: "Advanced",
                    items: [{
                        name: "name",
                        type: "input",
                        label: "Name"
                    }, {
                        name: "title",
                        type: "input",
                        label: "Title"
                    }, {
                        name: "descriptionUrl",
                        type: "urlinput",
                        label: "Long description URL"
                    }, {
                        type: "label",
                        label: "Border",
                        items: [{
                            type: "checkbox",
                            name: "showBorder",
                            label: "Show iframe border"
                        }]
                    }, {
                        type: "label",
                        label: "Scrollbar",
                        items: [{
                            type: "checkbox",
                            name: "scrollbar",
                            label: "Enable scrollbar"
                        }]
                    }]
                }]
            },
            buttons: [{
                type: "cancel",
                name: "cancel",
                text: "Cancel"
            }, {
                type: "submit",
                name: "submit",
                text: "Save",
                primary: !0
            }],
            onChange: (e,{name: t})=>{
                "size" === t && (e.redial(n(e.getData())),
                e.focus("size"))
            }
            ,
            onSubmit: t=>{
                const n = t.getData();
                if (n.source.value.length > 0) {
                    const t = ()=>{
                        if ((e=>e.options.isSet("tiny_pageembed_classes"))(e)) {
                            const t = o(e);
                            return f.some(w(t, (e=>e.value)))
                        }
                        return f.none()
                    }
                      , r = ie(n, (()=>l(e)), (()=>L(e.getDoc())), t);
                    e.insertContent(r),
                    e.nodeChanged()
                }
                t.close()
            }
            ,
            initialData: r
        })
          , r = e.selection.getNode()
          , s = (i = r,
        a = {
            source: {
                value: ""
            },
            size: "inline",
            dimensions: {
                width: "350px",
                height: "260px"
            },
            name: "",
            title: "",
            descriptionUrl: {
                value: ""
            },
            showBorder: !0,
            scrollbar: !1
        },
        c = t,
        f.from(i).map(L).filter(U).bind(V).filter((e=>P(e) && "iframe" === e.dom.nodeName.toLowerCase())).fold((()=>a), (e=>{
            const t = (e,t,n)=>T(e, t).getOr(n);
            return {
                source: {
                    value: t(e, "src", a.source.value)
                },
                size: (e=>{
                    const t = L(e);
                    return n = (e,n)=>K(t, n.value) ? n.value : e,
                    r = "inline",
                    x(c, ((e,t)=>{
                        r = n(r, e)
                    }
                    )),
                    r;
                    var n, r
                }
                )(i),
                dimensions: {
                    width: t(e, "width", a.dimensions.width),
                    height: t(e, "height", a.dimensions.height)
                },
                name: t(e, "name", a.name),
                title: t(e, "title", a.title),
                descriptionUrl: {
                    value: t(e, "longdesc", a.descriptionUrl.value)
                },
                showBorder: T(e, "frameborder").map((e=>"0" !== e.toLowerCase())).getOr(a.showBorder),
                scrollbar: T(e, "scrolling").map((e=>"yes" === e.toLowerCase())).getOr(a.scrollbar)
            }
        }
        )));
        var i, a, c;
        e.windowManager.open(n(s))
    }
    ;
    tinymce.PluginManager.requireLangPack("pageembed", "ar,bg_BG,ca,cs,da,de,el,es,eu,fa,fi,fr_FR,he_IL,hi,hr,hu_HU,id,it,ja,kk,ko_KR,ms,nb_NO,nl,pl,pt_BR,pt_PT,ro,ru,sk,sl_SI,sv_SE,th_TH,tr,uk,vi,zh_CN,zh_TW"),
    tinymce.PluginManager.add("pageembed", ((e,n)=>((e,n)=>!!e && -1 === ((e,n)=>{
        const r = t(e.major, n.major);
        if (0 !== r)
            return r;
        const s = t(e.minor, n.minor);
        if (0 !== s)
            return s;
        const i = t(e.patch, n.patch);
        return 0 !== i ? i : 0
    }
    )((e=>r((e=>[e.majorVersion, e.minorVersion].join(".").split(".").slice(0, 3).join("."))(e)))(e), r(n)))(tinymce, "6.0.0") ? (console.error("The pageembed plugin requires at least version 6.0.0 of TinyMCE"),
    {}) : (((e,t)=>{
        const n = e.options.register;
        n("tiny_pageembed_css_url", {
            processor: "string",
            default: t + "/css/empa30.css"
        }),
        n("tiny_pageembed_classes", {
            processor: "object[]",
            default: s
        }),
        n("tiny_pageembed_inline_styles", {
            processor: "boolean",
            default: !1
        })
    }
    )(e, n),
    (e=>{
        e.on("click keyup touchend", (()=>{
            f.from(e.selection.getNode()).map(L).each((e=>{
                U(e) && ((e,t)=>{
                    const n = e.dom;
                    return !(!n || !n.hasAttribute) && n.hasAttribute("data-mce-selected")
                }
                )(e) && E(e, "data-mce-selected", "2")
            }
            ))
        }
        )),
        e.on("PreInit", (()=>{
            e.parser.addNodeFilter("div", D),
            e.serializer.addNodeFilter("div", F)
        }
        ))
    }
    )(e),
    (e=>{
        e.ui.registry.addToggleButton("pageembed", {
            icon: "embed-page",
            tooltip: "Embed iframe",
            onAction: t=>{
                oe(e)
            }
            ,
            onSetup: t=>{
                const n = n=>t.setActive(!e.readonly && n.element.classList.contains(B));
                return e.on("nodechange", n),
                ()=>e.off("nodechange", n)
            }
        }),
        e.ui.registry.addMenuItem("pageembed", {
            text: "Insert/edit iframe",
            icon: "embed-page",
            onAction: t=>{
                oe(e)
            }
        })
    }
    )(e),
    ((e,t)=>{
        const n = a(e) || t + "/css/empa30.css";
        e.on("PreInit", (()=>{
            e.contentCSS.push(e.documentBaseURI.toAbsolute(n))
        }
        ))
    }
    )(e, n),
    {})))
}();
